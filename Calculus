{"allowedNumbers":["+917059804980"]}
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const { Client, LocalAuth } = require('whatsapp-web.js');

// Initialize the client with local storage for session persistence
const client = new Client({
    authStrategy: new LocalAuth(),
});

// Load authorized users from a JSON file
const loadAuthorizedUsers = () => {
    if (!fs.existsSync('users.json')) {
        fs.writeFileSync('users.json', JSON.stringify({ allowedNumbers: [] }));
    }
    const data = fs.readFileSync('users.json', 'utf8');
    return JSON.parse(data).allowedNumbers;
};

// Save updated authorized users to the JSON file
const saveAuthorizedUsers = (allowedNumbers) => {
    fs.writeFileSync('users.json', JSON.stringify({ allowedNumbers }, null, 4));
};

// Initialize authorized users
let allowedNumbers = loadAuthorizedUsers();

// Bot state variable
let isPaused = false;

// Generate QR code for first-time login
client.on('qr', (qr) => {
    console.log('Scan the QR code below to log in:');
    qrcode.generate(qr, { small: true });
});

// Triggered when the client is ready
client.on('ready', async () => {
    console.log('WhatsApp Client is ready!');

    // Fetch all chats and filter for group chats
    const allChats = await client.getChats();
    const groupChats = allChats.filter(chat => chat.isGroup);

    console.log(You are part of ${groupChats.length} groups.);
    groupChats.forEach(group => console.log(Group: ${group.name}));
});

// Listen for incoming messages
client.on('message', async (message) => {
    const senderNumber = message.author?.split('@')[0]; // Extract the sender's number

    // Handle pause and unpause commands
    if (message.body.toLowerCase() === '.pause') {
        if (allowedNumbers.includes(senderNumber)) {
            isPaused = true;
            console.log("Bot paused by an authorized user.");
            await client.sendMessage(message.from, "The bot has been paused. It will stop processing messages.");
        } else {
            console.log("Pause command ignored. User is not authorized.");
        }
        return;
    }

    if (message.body.toLowerCase() === '.unpause') {
        if (allowedNumbers.includes(senderNumber)) {
            isPaused = false;
            console.log("Bot unpaused by an authorized user.");
            await client.sendMessage(message.from, "The bot has been unpaused. It will resume processing messages.");
        } else {
            console.log("Unpause command ignored. User is not authorized.");
        }
        return;
    }

    // Skip message processing if the bot is paused
    if (isPaused) {
        console.log("Bot is paused. Ignoring message.");
        return;
    }

    // Dynamic user management
    if (allowedNumbers.includes(senderNumber)) {
        if (message.body.startsWith('.adduser')) {
            const newUser = message.body.split(' ')[1];
            if (newUser && !allowedNumbers.includes(newUser)) {
                allowedNumbers.push(newUser);
                saveAuthorizedUsers(allowedNumbers);
                await client.sendMessage(message.from, User ${newUser} has been authorized.);
                console.log(User ${newUser} added to authorized list.);
            } else {
                await client.sendMessage(message.from, Invalid or duplicate user.);
            }
            return;
        }

        if (message.body.startsWith('.removeuser')) {
            const userToRemove = message.body.split(' ')[1];
            if (userToRemove && allowedNumbers.includes(userToRemove)) {
                allowedNumbers = allowedNumbers.filter(num => num !== userToRemove);
                saveAuthorizedUsers(allowedNumbers);
                await client.sendMessage(message.from, User ${userToRemove} has been removed from authorized list.);
                console.log(User ${userToRemove} removed from authorized list.);
            } else {
                await client.sendMessage(message.from, User not found.);
            }
            return;
        }
    }

    // Check if the message is from a group
    if (message.from.endsWith('@g.us')) {
        const chat = await message.getChat();
        const groupName = chat.name;

        console.log(Message detected in group "${groupName}" from number "${senderNumber}");
        console.log(Full message body:\n${message.body});

        // Check if the sender is in the allowed list
        if (!allowedNumbers.includes(senderNumber)) {
            console.log(Message ignored. Sender (${senderNumber}) is not in the allowed list.);
            return; // Exit early if the sender is not allowed
        }

        console.log(Message is from an allowed sender (${senderNumber}). Proceeding to process.);

        // Check if the message contains card information and Captcha
        if (message.body.includes("üÉè Card Info üÉè") && message.body.includes("Captcha")) {
            console.log(Card message detected in group "${groupName}");

            // Extract the Tier value
            const tierRegex = /\üåü Tier :\ (\d+|S)/;
            const tierMatch = message.body.match(tierRegex);

            if (tierMatch) {
                const tier = tierMatch[1]; // Extract the tier value
                console.log(Extracted Tier: ${tier});

                // Check if the tier is 5, 6, or S
                if (tier === '5' || tier === '6' || tier === 'S') {
                    console.log("Valid tier detected. Proceeding with Captcha extraction.");

                    // Extract the Captcha value
                    const captchaPrefix = "üî∞ Captcha:";
                    const captchaIndex = message.body.indexOf(captchaPrefix);

                    if (captchaIndex !== -1) {
                        // Extract the Captcha value after "üî∞ Captcha:"
                        let captchaPart = message.body.substring(captchaIndex + captchaPrefix.length).trim();

                        // Remove any bold formatting (i.e., asterisks) and extra text
                        captchaPart = captchaPart.replace(/\*/g, '').trim();

                        // Remove the extra text: "[ Use #claim <captcha> to acquire this card ]"
                        const useClaimText = "[ Use #claim <captcha> to acquire this card ]";
                        if (captchaPart.includes(useClaimText)) {
                            captchaPart = captchaPart.replace(useClaimText, '').trim();
                        }

                        console.log(Extracted Captcha: ${captchaPart});

                        // Check if a captcha was found and it's valid
                        if (captchaPart) {
                            // Construct the claim command
                            const claimCommand = #claim ${captchaPart};
                            console.log(Sending claim command: ${claimCommand});

                            // Add a 3-second delay before sending the message
                            setTimeout(async () => {
                                try {
                                    await client.sendMessage(message.from, claimCommand);
                                    console.log(Successfully sent claim command: ${claimCommand});
                                } catch (error) {
                                    console.error(Failed to send claim command: ${error.message});
                                }
                            }, 3000);  // 3000 ms = 3 seconds delay
                        } else {
                            console.log("Captcha not found or invalid.");
                        }
                    } else {
                        console.log("Captcha section not found in the message.");
                    }
                } else {
                    console.log("Tier is not valid for claiming. Ignoring message.");
                }
            } else {
                console.log("Tier information not found in the message.");
            }
        } else {
            console.log("This is not a valid card message.");
        }
    }
});

// Handle authentication failure
client.on('auth_failure', (msg) => {
    console.error('Authentication failure:', msg);
});

// Handle client disconnection and reconnect
client.on('disconnected', (reason) => {
    console.log('Client was logged out:', reason);
    console.log('Reconnecting...');
    client.initialize();
});

// Initialize the WhatsApp client
client.initialize();
